generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  username      String
  password      String
  avatar        String?
  contactNumber String
  createAt      DateTime       @default(now())
  posts         Post[]
  savedPosts    SavedPost[]
  chats         Chat[]         @relation(fields: [chatIDs], references: [id])
  chatIDs       String[]       @db.ObjectId
  bookings      Booking[]
  notifications Notification[]
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
  bookings   Booking[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  desc String
  size Int?

  // amenities
  wifi        Boolean?
  water       Boolean?
  gas         Boolean?
  parking     Boolean?
  electricity Boolean?

  swimmingPool  Boolean?
  fitnessCenter Boolean?
  clubhouse     Boolean?
  playground    Boolean?

  petFriendly Boolean?

  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIDs], references: [id])
  userIDs     String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingDate DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  post        Post     @relation(fields: [postId], references: [id])
  postId      String   @db.ObjectId
  createdAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}
